let wasm;const cachedTextDecoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};"undefined"!=typeof TextDecoder&&cachedTextDecoder.decode();let cachedUint8ArrayMemory0=null;function getUint8ArrayMemory0(){return null!==cachedUint8ArrayMemory0&&0!==cachedUint8ArrayMemory0.byteLength||(cachedUint8ArrayMemory0=new Uint8Array(wasm.memory.buffer)),cachedUint8ArrayMemory0}function getStringFromWasm0(e,t){return e>>>=0,cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(e,e+t))}let WASM_VECTOR_LEN=0;function passArray8ToWasm0(e,t){const n=t(1*e.length,1)>>>0;return getUint8ArrayMemory0().set(e,n/1),WASM_VECTOR_LEN=e.length,n}const cachedTextEncoder="undefined"!=typeof TextEncoder?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}},encodeString="function"==typeof cachedTextEncoder.encodeInto?function(e,t){return cachedTextEncoder.encodeInto(e,t)}:function(e,t){const n=cachedTextEncoder.encode(e);return t.set(n),{read:e.length,written:n.length}};function passStringToWasm0(e,t,n){if(void 0===n){const n=cachedTextEncoder.encode(e),r=t(n.length,1)>>>0;return getUint8ArrayMemory0().subarray(r,r+n.length).set(n),WASM_VECTOR_LEN=n.length,r}let r=e.length,a=t(r,1)>>>0;const i=getUint8ArrayMemory0();let s=0;for(;s<r;s++){const t=e.charCodeAt(s);if(t>127)break;i[a+s]=t}if(s!==r){0!==s&&(e=e.slice(s)),a=n(a,r,r=s+3*e.length,1)>>>0;const t=getUint8ArrayMemory0().subarray(a+s,a+r);s+=encodeString(e,t).written,a=n(a,r,s,1)>>>0}return WASM_VECTOR_LEN=s,a}export function find_panels(e,t,n,r,a,i,s,o){const _=passArray8ToWasm0(e,wasm.__wbindgen_malloc),c=WASM_VECTOR_LEN,w=passStringToWasm0(r,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),l=WASM_VECTOR_LEN;return wasm.find_panels(_,c,t,n,w,l,a,i,s,o)}const WasmSerializablePanelFinalization="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry(e=>wasm.__wbg_wasmserializablepanel_free(e>>>0,1));export class WasmSerializablePanel{__destroy_into_raw(){const e=this.__wbg_ptr;return this.__wbg_ptr=0,WasmSerializablePanelFinalization.unregister(this),e}free(){const e=this.__destroy_into_raw();wasm.__wbg_wasmserializablepanel_free(e,0)}get x(){return wasm.__wbg_get_wasmserializablepanel_x(this.__wbg_ptr)}set x(e){wasm.__wbg_set_wasmserializablepanel_x(this.__wbg_ptr,e)}get y(){return wasm.__wbg_get_wasmserializablepanel_y(this.__wbg_ptr)}set y(e){wasm.__wbg_set_wasmserializablepanel_y(this.__wbg_ptr,e)}get width(){return wasm.__wbg_get_wasmserializablepanel_width(this.__wbg_ptr)}set width(e){wasm.__wbg_set_wasmserializablepanel_width(this.__wbg_ptr,e)}get height(){return wasm.__wbg_get_wasmserializablepanel_height(this.__wbg_ptr)}set height(e){wasm.__wbg_set_wasmserializablepanel_height(this.__wbg_ptr,e)}}async function __wbg_load(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}function __wbg_get_imports(){const e={wbg:{}};return e.wbg.__wbindgen_init_externref_table=function(){const e=wasm.__wbindgen_export_0,t=e.grow(4);e.set(0,void 0),e.set(t+0,void 0),e.set(t+1,null),e.set(t+2,!0),e.set(t+3,!1)},e.wbg.__wbindgen_string_new=function(e,t){return getStringFromWasm0(e,t)},e.wbg.__wbindgen_throw=function(e,t){throw new Error(getStringFromWasm0(e,t))},e}function __wbg_init_memory(e,t){}function __wbg_finalize_init(e,t){return wasm=e.exports,__wbg_init.__wbindgen_wasm_module=t,cachedUint8ArrayMemory0=null,wasm.__wbindgen_start(),wasm}function initSync(e){if(void 0!==wasm)return wasm;void 0!==e&&(Object.getPrototypeOf(e)===Object.prototype?({module:e}=e):console.warn("using deprecated parameters for `initSync()`; pass a single object instead"));const t=__wbg_get_imports();__wbg_init_memory(t),e instanceof WebAssembly.Module||(e=new WebAssembly.Module(e));return __wbg_finalize_init(new WebAssembly.Instance(e,t),e)}async function __wbg_init(e){if(void 0!==wasm)return wasm;void 0!==e&&(Object.getPrototypeOf(e)===Object.prototype?({module_or_path:e}=e):console.warn("using deprecated parameters for the initialization function; pass a single object instead")),void 0===e&&(e=new URL("kumiko_wasm_bg.wasm",import.meta.url));const t=__wbg_get_imports();("string"==typeof e||"function"==typeof Request&&e instanceof Request||"function"==typeof URL&&e instanceof URL)&&(e=fetch(e)),__wbg_init_memory(t);const{instance:n,module:r}=await __wbg_load(await e,t);return __wbg_finalize_init(n,r)}export{initSync};export default __wbg_init;